package dprsnn.com.paymentsRegisters.controllers;

import dprsnn.com.paymentsRegisters.dto.PaymentRecord;
import dprsnn.com.paymentsRegisters.service.CrmOrderService;
import dprsnn.com.paymentsRegisters.service.ExcelGenerator;
import dprsnn.com.paymentsRegisters.service.UkrpostService;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller
public class UkrPostController {

    private static final Logger logger = LoggerFactory.getLogger(UkrPostController.class);
    private final UkrpostService ukrpostService;
    private final CrmOrderService crmOrderService;

    public UkrPostController(UkrpostService ukrpostService, CrmOrderService crmOrderService) {
        this.ukrpostService = ukrpostService;
        this.crmOrderService = crmOrderService;
    }

    @GetMapping("/ukrpost")
    public String showUploadForm() {
        return "ukrpost";
    }

    @GetMapping("/ukrpost-update-yesterday")
    public String updateTtnYesterday() {
        ukrpostService.updateOrderList(LocalDate.now(), LocalDate.now().minusDays(1));
        return "redirect:/ukrpost";
    }

    @GetMapping("/ukrpost-update-month")
    public String updateTtnMonth() {
        ukrpostService.updateOrderList(LocalDate.now(), LocalDate.now().minusDays(30));
        return "redirect:/ukrpost";
    }

    @PostMapping(value = "/ukrpost", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    @ResponseBody
    public ResponseEntity<?> handleEvoPayUpload(@RequestParam("file") MultipartFile file) {
        if (file.isEmpty()) {
            return ResponseEntity.badRequest().body(Map.of(
                    "status", "error",
                    "message", "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è."
            ));
        }

        try {
            List<Map<String, String>> payments = processUkrpostExcel(file);
            return ResponseEntity.ok(Map.of(
                    "status", "success",
                    "message", "–ó–Ω–∞–π–¥–µ–Ω–æ " + payments.size() + " –ø–ª–∞—Ç–µ–∂—ñ–≤ EvoPay",
                    "payments", payments
            ));
        } catch (IOException e) {
            logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ EvoPay —Ñ–∞–π–ª—É: {}", e.getMessage(), e);
            return ResponseEntity.badRequest().body(Map.of(
                    "status", "error",
                    "message", "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–∞–π–ª—É: " + e.getMessage()
            ));
        }
    }

    @PostMapping("/ukrpost/make-payments")
    @ResponseBody
    public ResponseEntity<?> processMonoPayments(
            @RequestBody List<PaymentRecord> payments,
            @RequestParam(name = "paymentType", required = true) String paymentType,
            @RequestParam(name = "exportExcel", required = false, defaultValue = "false") boolean exportExcel) {

        try {
            List<Map<String, Object>> results = crmOrderService.makePayments(payments, paymentType);

            if (exportExcel) {
                String fileName = ExcelGenerator.generateAndSavePaymentsExcel(payments, paymentType);
                String fileUrl = "/mono-pay/download/" + fileName;

                return ResponseEntity.ok(Map.of(
                        "status", "success",
                        "message", "–û–ø–ª–∞—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ —Ç–∞ —Ñ–∞–π–ª —Å—Ç–≤–æ—Ä–µ–Ω–æ",
                        "results", results,
                        "fileUrl", fileUrl
                ));
            } else {
                return ResponseEntity.ok(Map.of(
                        "status", "success",
                        "message", "–û–ø–ª–∞—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ",
                        "results", results
                ));
            }
        } catch (Exception e) {
            logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ñ –æ–ø–ª–∞—Ç MonoPay: {}", e.getMessage(), e);
            return ResponseEntity.badRequest().body(Map.of(
                    "status", "error",
                    "message", "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ: " + e.getMessage()
            ));
        }
    }

    private List<Map<String, String>> processUkrpostExcel(MultipartFile file) throws IOException {
        List<Map<String, String>> payments = new ArrayList<>();
        String registryDateFormatted = null;

        try (Workbook workbook = new XSSFWorkbook(file.getInputStream())) {
            Sheet sheet = workbook.getSheetAt(0);

            // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞—Ç–∏ –∑ –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞
            Row firstRow = sheet.getRow(0);
            if (firstRow != null) {
                Cell firstCell = firstRow.getCell(1); // –ö–æ–ª–æ–Ω–∫–∞ B
                if (firstCell != null) {
                    String firstRowText = getCellValueAsString(firstCell);
                    java.util.regex.Pattern pattern = java.util.regex.Pattern.compile("\\d{4}-\\d{2}-\\d{2}");
                    java.util.regex.Matcher matcher = pattern.matcher(firstRowText);
                    if (matcher.find()) {
                        String registryDate = matcher.group();
                        registryDateFormatted = formatDate(registryDate);
                        System.out.println("–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä—É: " + registryDateFormatted);
                    }
                }
            }

            int headerRowNum = findHeaderRow(sheet);
            if (headerRowNum == -1) throw new IOException("–ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");

            Row headerRow = sheet.getRow(headerRowNum);
            int amountCol = -1, orderCol = -1;
            List<String> foundHeaders = new ArrayList<>();

            for (Cell cell : headerRow) {
                String value = normalizeHeader(getCellValueAsString(cell));
                foundHeaders.add(value);

                if ("—Å—É–º–∞, –≥—Ä–Ω.".equalsIgnoreCase(value)) amountCol = cell.getColumnIndex();
                else if ("–®–ö–Ü".equalsIgnoreCase(value)) orderCol = cell.getColumnIndex();
            }

            logger.info("üîç –ó–Ω–∞–π–¥–µ–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏: {}", foundHeaders);
            logger.info("üìå –Ü–Ω–¥–µ–∫—Å–∏ –∫–æ–ª–æ–Ω–æ–∫ - –°—É–º–∞: {}, –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: {}", amountCol, orderCol);

            if (amountCol == -1 || orderCol == -1) {
                throw new IOException("–ù–µ –≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Ñ–∞–π–ª—ñ. –ü–æ—Ç—Ä—ñ–±–Ω—ñ: —Å—É–º–∞, –≥—Ä–Ω., –®–ö–Ü");
            }

            if (registryDateFormatted == null) {
                throw new IOException("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –¥–∞—Ç—É —Ä–µ—î—Å—Ç—Ä—É –∑ —Ñ–∞–π–ª—É");
            }

            // –ü–æ—á–∏–Ω–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –∑ —Ä—è–¥–∫–∞ headerRowNum + 2 (–ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –æ–¥–∏–Ω —Ä—è–¥–æ–∫ –ø—ñ—Å–ª—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤)
            for (int i = headerRowNum + 2; i <= sheet.getLastRowNum(); i++) {
                Row row = sheet.getRow(i);
                if (row == null) continue;

                String ttn = getCellValueAsString(row.getCell(orderCol));
                if (ttn == null || ttn.isEmpty()) continue;

                Map<String, String> payment = new HashMap<>();
                payment.put("date", registryDateFormatted);
                payment.put("amount", getCellValueAsString(row.getCell(amountCol)));
                payment.put("ttn", ttn);

                payments.add(payment);
            }
        }

        return payments;
    }

    private String formatDate(String yyyyMmDd) {
        String[] parts = yyyyMmDd.split("-");
        if (parts.length != 3) return yyyyMmDd;
        return parts[2] + "." + parts[1] + "." + parts[0];
    }

    private int findHeaderRow(Sheet sheet) {
        for (int i = 0; i <= sheet.getLastRowNum(); i++) {
            Row row = sheet.getRow(i);
            if (row == null) continue;

            List<String> headers = new ArrayList<>();
            for (Cell cell : row) {
                String value = normalizeHeader(getCellValueAsString(cell));
                headers.add(value);
            }

            if (headers.contains("–¥–∞—Ç–∞") &&
                    headers.contains("—Å—É–º–∞, –≥—Ä–Ω.") &&
                    headers.contains("–®–ö–Ü")) {

                logger.info("‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ä—è–¥–∫—É {}: {}", i, headers);
                return i;
            }

            logger.debug("‚õî –†—è–¥–æ–∫ {} –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —É—Å—ñ—Ö –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤: {}", i, headers);
        }

        logger.warn("‚ö†Ô∏è –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –∂–æ–¥–Ω–æ–º—É —Ä—è–¥–∫—É.");
        return -1;
    }

    private String normalizeHeader(String header) {
        if (header == null) return "";
        return header.replace("\n", " ").replaceAll("\\s+", " ").trim();
    }

    private String getCellValueAsString(Cell cell) {
        if (cell == null) return "";

        switch (cell.getCellType()) {
            case STRING:
                return cell.getStringCellValue();
            case NUMERIC:
                if (DateUtil.isCellDateFormatted(cell)) {
                    return cell.getDateCellValue().toString();
                }
                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —á–∏—Å–ª–æ —Ü—ñ–ª–µ
                double numericValue = cell.getNumericCellValue();
                if (numericValue == (int) numericValue) {
                    // –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è —î —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ü—ñ–ª–µ —á–∏—Å–ª–æ —è–∫ —Ä—è–¥–æ–∫
                    return String.valueOf((int) numericValue);
                } else {
                    // –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –ø–ª–∞–≤–∞—é—á–æ—é –∫–æ–º–æ—é, –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –π–æ–≥–æ —è–∫ —Ä—è–¥–æ–∫
                    return String.valueOf(numericValue);
                }
            case BOOLEAN:
                return String.valueOf(cell.getBooleanCellValue());
            case FORMULA:
                try {
                    return String.valueOf(cell.getNumericCellValue());
                } catch (Exception e) {
                    return cell.getCellFormula();
                }
            default:
                return "";
        }
    }




}
